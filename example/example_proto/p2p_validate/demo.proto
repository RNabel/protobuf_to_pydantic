syntax = "proto3";
package p2p_validate_test;


import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "example/example_proto/common/p2p_validate.proto";


message FloatTest {
  float const_test = 1 [(p2p_validate.rules).float.const = 1];
  float range_e_test = 2 [(p2p_validate.rules).float = {ge: 1, le: 10}];
  float range_test = 3[(p2p_validate.rules).float = {gt: 1, lt: 10}];
  float in_test = 4[(p2p_validate.rules).float = {in: [1,2,3]}];
  float not_in_test = 5[(p2p_validate.rules).float = {not_in: [1,2,3]}];
  float default_test = 6[(p2p_validate.rules).float.default = 1.0];
  float default_template_test = 20[(p2p_validate.rules).float.default_template = "p2p@timestamp|10"];
  float not_enable_test = 7[(p2p_validate.rules).float.enable = false];
  float default_factory_test = 8[(p2p_validate.rules).float.default_factory = "p2p@builtin|float"];
  float required_test = 19[(p2p_validate.rules).float.required= true];
  float alias_test = 10 [(p2p_validate.rules).float.alias = "alias"];
  float desc_test = 11 [(p2p_validate.rules).float.description = "test desc"];
  float multiple_of_test = 12 [(p2p_validate.rules).float.multiple_of = 3.0];
  float example_test = 13 [(p2p_validate.rules).float.example = 1.0];
  float example_factory = 14 [(p2p_validate.rules).float.example_factory = "p2p@builtin|float"];
  float field_test = 15[(p2p_validate.rules).float.field = "p2p@local|CustomerField"];
  float type_test = 16[(p2p_validate.rules).float.type = "p2p@local|confloat"];
  float title_test = 17 [(p2p_validate.rules).float.title = "title_test"];
  float extra_test = 18 [(p2p_validate.rules).float.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message DoubleTest {
  double const_test = 1 [(p2p_validate.rules).double.const = 1];
  double range_e_test = 2 [(p2p_validate.rules).double = {ge: 1, le: 10}];
  double range_test = 3[(p2p_validate.rules).double = {gt: 1, lt: 10}];
  double in_test = 4[(p2p_validate.rules).double = {in: [1,2,3]}];
  double not_in_test = 5[(p2p_validate.rules).double = {not_in: [1,2,3]}];
  double default_test = 6[(p2p_validate.rules).double.default = 1.0];
  double default_template_test = 20[(p2p_validate.rules).double.default_template = "p2p@timestamp|10"];
  double not_enable_test = 7[(p2p_validate.rules).double.enable = false];
  double default_factory_test = 8[(p2p_validate.rules).double.default_factory = "p2p@builtin|float"];
  double required_test = 19[(p2p_validate.rules).double.required = true];
  double alias_test = 10 [(p2p_validate.rules).double.alias = "alias"];
  double desc_test = 11 [(p2p_validate.rules).double.description = "test desc"];
  double multiple_of_test = 12 [(p2p_validate.rules).double.multiple_of = 3.0];
  double example_test = 13 [(p2p_validate.rules).double.example = 1.0];
  double example_factory = 14 [(p2p_validate.rules).double.example_factory = "p2p@builtin|float"];
  double field_test = 15[(p2p_validate.rules).double.field = "p2p@local|CustomerField"];
  double type_test = 16[(p2p_validate.rules).double.type = "p2p@local|confloat"];
  double title_test = 17 [(p2p_validate.rules).double.title = "title_test"];
  double extra_test = 18 [(p2p_validate.rules).double.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Int32Test {
  int32 const_test = 1 [(p2p_validate.rules).int32.const = 1];
  int32 range_e_test = 2 [(p2p_validate.rules).int32 = {ge: 1, le: 10}];
  int32 range_test = 3[(p2p_validate.rules).int32 = {gt: 1, lt: 10}];
  int32 in_test = 4[(p2p_validate.rules).int32 = {in: [1,2,3]}];
  int32 not_in_test = 5[(p2p_validate.rules).int32 = {not_in: [1,2,3]}];
  int32 default_test = 6[(p2p_validate.rules).int32.default = 1.0];
  int32 default_template_test = 20[(p2p_validate.rules).int32.default_template = "p2p@timestamp|10"];
  int32 not_enable_test = 7[(p2p_validate.rules).int32.enable = false];
  int32 default_factory_test = 8[(p2p_validate.rules).int32.default_factory = "p2p@builtin|int"];
  int32 required_test = 19[(p2p_validate.rules).int32.required= true];
  int32 alias_test = 10 [(p2p_validate.rules).int32.alias = "alias"];
  int32 desc_test = 11 [(p2p_validate.rules).int32.description = "test desc"];
  int32 multiple_of_test = 12 [(p2p_validate.rules).int32.multiple_of = 3.0];
  int32 example_test = 13 [(p2p_validate.rules).int32.example = 1.0];
  int32 example_factory = 14 [(p2p_validate.rules).int32.example_factory = "p2p@builtin|int"];
  int32 field_test = 15[(p2p_validate.rules).int32.field = "p2p@local|CustomerField"];
  int32 type_test = 16[(p2p_validate.rules).int32.type = "p2p@local|confloat"];
  int32 title_test = 17 [(p2p_validate.rules).int32.title = "title_test"];
  int32 extra_test = 18 [(p2p_validate.rules).int32.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Int64Test {
  int64 const_test = 1 [(p2p_validate.rules).int64.const = 1];
  int64 range_e_test = 2 [(p2p_validate.rules).int64 = {ge: 1, le: 10}];
  int64 range_test = 3[(p2p_validate.rules).int64 = {gt: 1, lt: 10}];
  int64 in_test = 4[(p2p_validate.rules).int64 = {in: [1,2,3]}];
  int64 not_in_test = 5[(p2p_validate.rules).int64 = {not_in: [1,2,3]}];
  int64 default_test = 6[(p2p_validate.rules).int64.default = 1.0];
  int64 default_template_test = 20[(p2p_validate.rules).int64.default_template = "p2p@timestamp|10"];
  int64 not_enable_test = 7[(p2p_validate.rules).int64.enable = false];
  int64 default_factory_test = 8[(p2p_validate.rules).int64.default_factory = "p2p@builtin|int"];
  int64 required_test = 19[(p2p_validate.rules).int64.required= true];
  int64 alias_test = 10 [(p2p_validate.rules).int64.alias = "alias"];
  int64 desc_test = 11 [(p2p_validate.rules).int64.description = "test desc"];
  int64 multiple_of_test = 12 [(p2p_validate.rules).int64.multiple_of = 3.0];
  int64 example_test = 13 [(p2p_validate.rules).int64.example = 1.0];
  int64 example_factory = 14 [(p2p_validate.rules).int64.example_factory = "p2p@builtin|int"];
  int64 field_test = 15[(p2p_validate.rules).int64.field = "p2p@local|CustomerField"];
  int64 type_test = 16[(p2p_validate.rules).int64.type = "p2p@local|confloat"];
  int64 title_test = 17 [(p2p_validate.rules).int64.title = "title_test"];
  int64 extra_test = 18 [(p2p_validate.rules).int64.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Uint32Test {
  uint32 const_test = 1 [(p2p_validate.rules).uint32.const = 1];
  uint32 range_e_test = 2 [(p2p_validate.rules).uint32 = {ge: 1, le: 10}];
  uint32 range_test = 3[(p2p_validate.rules).uint32 = {gt: 1, lt: 10}];
  uint32 in_test = 4[(p2p_validate.rules).uint32 = {in: [1,2,3]}];
  uint32 not_in_test = 5[(p2p_validate.rules).uint32 = {not_in: [1,2,3]}];
  uint32 default_test = 6[(p2p_validate.rules).uint32.default = 1.0];
  uint32 default_template_test = 20[(p2p_validate.rules).uint32.default_template = "p2p@timestamp|10"];
  uint32 not_enable_test = 7[(p2p_validate.rules).uint32.enable = false];
  uint32 default_factory_test = 8[(p2p_validate.rules).uint32.default_factory = "p2p@builtin|int"];
  uint32 required_test = 19[(p2p_validate.rules).uint32.required= true];
  uint32 alias_test = 10 [(p2p_validate.rules).uint32.alias = "alias"];
  uint32 desc_test = 11 [(p2p_validate.rules).uint32.description = "test desc"];
  uint32 multiple_of_test = 12 [(p2p_validate.rules).uint32.multiple_of = 3.0];
  uint32 example_test = 13 [(p2p_validate.rules).uint32.example = 1.0];
  uint32 example_factory = 14 [(p2p_validate.rules).uint32.example_factory = "p2p@builtin|int"];
  uint32 field_test = 15[(p2p_validate.rules).uint32.field = "p2p@local|CustomerField"];
  uint32 type_test = 16[(p2p_validate.rules).uint32.type = "p2p@local|conint"];
  uint32 title_test = 17 [(p2p_validate.rules).uint32.title = "title_test"];
  uint32 extra_test = 18 [(p2p_validate.rules).uint32.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Sint32Test {
  sint32 const_test = 1 [(p2p_validate.rules).sint32.const = 1];
  sint32 range_e_test = 2 [(p2p_validate.rules).sint32 = {ge: 1, le: 10}];
  sint32 range_test = 3[(p2p_validate.rules).sint32 = {gt: 1, lt: 10}];
  sint32 in_test = 4[(p2p_validate.rules).sint32 = {in: [1,2,3]}];
  sint32 not_in_test = 5[(p2p_validate.rules).sint32 = {not_in: [1,2,3]}];
  sint32 default_test = 6[(p2p_validate.rules).sint32.default = 1.0];
  sint32 default_template_test = 20[(p2p_validate.rules).sint32.default_template = "p2p@timestamp|10"];
  sint32 not_enable_test = 7[(p2p_validate.rules).sint32.enable = false];
  sint32 default_factory_test = 8[(p2p_validate.rules).sint32.default_factory = "p2p@builtin|int"];
  sint32 required_test = 19[(p2p_validate.rules).sint32.required = true];
  sint32 alias_test = 10 [(p2p_validate.rules).sint32.alias = "alias"];
  sint32 desc_test = 11 [(p2p_validate.rules).sint32.description = "test desc"];
  sint32 multiple_of_test = 12 [(p2p_validate.rules).sint32.multiple_of = 3.0];
  sint32 example_test = 13 [(p2p_validate.rules).sint32.example = 1.0];
  sint32 example_factory = 14 [(p2p_validate.rules).sint32.example_factory = "p2p@builtin|int"];
  sint32 field_test = 15[(p2p_validate.rules).sint32.field = "p2p@local|CustomerField"];
  sint32 type_test = 16[(p2p_validate.rules).sint32.type = "p2p@local|conint"];
  sint32 title_test = 17 [(p2p_validate.rules).sint32.title = "title_test"];
  sint32 extra_test = 18 [(p2p_validate.rules).sint32.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Uint64Test {
  uint64 const_test = 1 [(p2p_validate.rules).uint64.const = 1];
  uint64 range_e_test = 2 [(p2p_validate.rules).uint64 = {ge: 1, le: 10}];
  uint64 range_test = 3[(p2p_validate.rules).uint64 = {gt: 1, lt: 10}];
  uint64 in_test = 4[(p2p_validate.rules).uint64 = {in: [1,2,3]}];
  uint64 not_in_test = 5[(p2p_validate.rules).uint64 = {not_in: [1,2,3]}];
  uint64 default_test = 6[(p2p_validate.rules).uint64.default = 1.0];
  uint64 default_template_test = 20[(p2p_validate.rules).uint64.default_template = "p2p@timestamp|10"];
  uint64 not_enable_test = 7[(p2p_validate.rules).uint64.enable = false];
  uint64 default_factory_test = 8[(p2p_validate.rules).uint64.default_factory = "p2p@builtin|int"];
  uint64 required_test = 19[(p2p_validate.rules).uint64.required = true];
  uint64 alias_test = 10 [(p2p_validate.rules).uint64.alias = "alias"];
  uint64 desc_test = 11 [(p2p_validate.rules).uint64.description = "test desc"];
  uint64 multiple_of_test = 12 [(p2p_validate.rules).uint64.multiple_of = 3.0];
  uint64 example_test = 13 [(p2p_validate.rules).uint64.example = 1.0];
  uint64 example_factory = 14 [(p2p_validate.rules).uint64.example_factory = "p2p@builtin|int"];
  uint64 field_test = 15[(p2p_validate.rules).uint64.field = "p2p@local|CustomerField"];
  uint64 type_test = 16[(p2p_validate.rules).uint64.type = "p2p@local|conint"];
  uint64 title_test = 17 [(p2p_validate.rules).uint64.title = "title_test"];
  uint64 extra_test = 18 [(p2p_validate.rules).uint64.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Sint64Test {
  sint64 const_test = 1 [(p2p_validate.rules).sint64.const = 1];
  sint64 range_e_test = 2 [(p2p_validate.rules).sint64 = {ge: 1, le: 10}];
  sint64 range_test = 3[(p2p_validate.rules).sint64 = {gt: 1, lt: 10}];
  sint64 in_test = 4[(p2p_validate.rules).sint64 = {in: [1,2,3]}];
  sint64 not_in_test = 5[(p2p_validate.rules).sint64 = {not_in: [1,2,3]}];
  sint64 default_test = 6[(p2p_validate.rules).sint64.default = 1.0];
  sint64 default_template_test = 20[(p2p_validate.rules).sint64.default_template = "p2p@timestamp|10"];
  sint64 not_enable_test = 7[(p2p_validate.rules).sint64.enable = false];
  sint64 default_factory_test = 8[(p2p_validate.rules).sint64.default_factory = "p2p@builtin|int"];
  sint64 required_test = 19[(p2p_validate.rules).sint64.required = true];
  sint64 alias_test = 10 [(p2p_validate.rules).sint64.alias = "alias"];
  sint64 desc_test = 11 [(p2p_validate.rules).sint64.description = "test desc"];
  sint64 multiple_of_test = 12 [(p2p_validate.rules).sint64.multiple_of = 3.0];
  sint64 example_test = 13 [(p2p_validate.rules).sint64.example = 1.0];
  sint64 example_factory = 14 [(p2p_validate.rules).sint64.example_factory = "p2p@builtin|int"];
  sint64 field_test = 15[(p2p_validate.rules).sint64.field = "p2p@local|CustomerField"];
  sint64 type_test = 16[(p2p_validate.rules).sint64.type = "p2p@local|conint"];
  sint64 title_test = 17 [(p2p_validate.rules).sint64.title = "title_test"];
  sint64 extra_test = 18 [(p2p_validate.rules).sint64.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Fixed32Test {
  fixed32 const_test = 1 [(p2p_validate.rules).fixed32.const = 1];
  fixed32 range_e_test = 2 [(p2p_validate.rules).fixed32 = {ge: 1, le: 10}];
  fixed32 range_test = 3[(p2p_validate.rules).fixed32 = {gt: 1, lt: 10}];
  fixed32 in_test = 4[(p2p_validate.rules).fixed32 = {in: [1,2,3]}];
  fixed32 not_in_test = 5[(p2p_validate.rules).fixed32 = {not_in: [1,2,3]}];
  fixed32 default_test = 6[(p2p_validate.rules).fixed32.default = 1.0];
  fixed32 default_template_test = 20[(p2p_validate.rules).fixed32.default_template = "p2p@timestamp|10"];
  fixed32 not_enable_test = 7[(p2p_validate.rules).fixed32.enable = false];
  fixed32 default_factory_test = 8[(p2p_validate.rules).fixed32.default_factory = "p2p@builtin|float"];
  fixed32 required_test = 19[(p2p_validate.rules).fixed32.required = true];
  fixed32 alias_test = 10 [(p2p_validate.rules).fixed32.alias = "alias"];
  fixed32 desc_test = 11 [(p2p_validate.rules).fixed32.description = "test desc"];
  fixed32 multiple_of_test = 12 [(p2p_validate.rules).fixed32.multiple_of = 3.0];
  fixed32 example_test = 13 [(p2p_validate.rules).fixed32.example = 1.0];
  fixed32 example_factory = 14 [(p2p_validate.rules).fixed32.example_factory = "p2p@builtin|float"];
  fixed32 field_test = 15[(p2p_validate.rules).fixed32.field = "p2p@local|CustomerField"];
  fixed32 type_test = 16[(p2p_validate.rules).fixed32.type = "p2p@local|confloat"];
  fixed32 title_test = 17 [(p2p_validate.rules).fixed32.title = "title_test"];
  fixed32 extra_test = 18 [(p2p_validate.rules).fixed32.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Fixed64Test {
  fixed64 const_test = 1 [(p2p_validate.rules).fixed64.const = 1];
  fixed64 range_e_test = 2 [(p2p_validate.rules).fixed64 = {ge: 1, le: 10}];
  fixed64 range_test = 3[(p2p_validate.rules).fixed64 = {gt: 1, lt: 10}];
  fixed64 in_test = 4[(p2p_validate.rules).fixed64 = {in: [1,2,3]}];
  fixed64 not_in_test = 5[(p2p_validate.rules).fixed64 = {not_in: [1,2,3]}];
  fixed64 default_test = 6[(p2p_validate.rules).fixed64.default = 1.0];
  fixed64 default_template_test = 20[(p2p_validate.rules).fixed64.default_template = "p2p@timestamp|10"];
  fixed64 not_enable_test = 7[(p2p_validate.rules).fixed64.enable = false];
  fixed64 default_factory_test = 8[(p2p_validate.rules).fixed64.default_factory = "p2p@builtin|float"];
  fixed64 required_test = 19[(p2p_validate.rules).fixed64.required = true];
  fixed64 alias_test = 10 [(p2p_validate.rules).fixed64.alias = "alias"];
  fixed64 desc_test = 11 [(p2p_validate.rules).fixed64.description = "test desc"];
  fixed64 multiple_of_test = 12 [(p2p_validate.rules).fixed64.multiple_of = 3.0];
  fixed64 example_test = 13 [(p2p_validate.rules).fixed64.example = 1.0];
  fixed64 example_factory = 14 [(p2p_validate.rules).fixed64.example_factory = "p2p@builtin|float"];
  fixed64 field_test = 15[(p2p_validate.rules).fixed64.field = "p2p@local|CustomerField"];
  fixed64 type_test = 16[(p2p_validate.rules).fixed64.type = "p2p@local|confloat"];
  fixed64 title_test = 17 [(p2p_validate.rules).fixed64.title = "title_test"];
  fixed64 extra_test = 18 [(p2p_validate.rules).fixed64.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Sfixed32Test {
  sfixed32 const_test = 1 [(p2p_validate.rules).sfixed32.const = 1];
  sfixed32 range_e_test = 2 [(p2p_validate.rules).sfixed32 = {ge: 1, le: 10}];
  sfixed32 range_test = 3[(p2p_validate.rules).sfixed32 = {gt: 1, lt: 10}];
  sfixed32 in_test = 4[(p2p_validate.rules).sfixed32 = {in: [1,2,3]}];
  sfixed32 not_in_test = 5[(p2p_validate.rules).sfixed32 = {not_in: [1,2,3]}];
  sfixed32 default_test = 6[(p2p_validate.rules).sfixed32.default = 1.0];
  sfixed32 default_template_test = 20[(p2p_validate.rules).sfixed32.default_template = "p2p@timestamp|10"];
  sfixed32 not_enable_test = 7[(p2p_validate.rules).sfixed32.enable = false];
  sfixed32 default_factory_test = 8[(p2p_validate.rules).sfixed32.default_factory = "p2p@builtin|float"];
  sfixed32 required_test = 19[(p2p_validate.rules).sfixed32.required = true];
  sfixed32 alias_test = 10 [(p2p_validate.rules).sfixed32.alias = "alias"];
  sfixed32 desc_test = 11 [(p2p_validate.rules).sfixed32.description = "test desc"];
  sfixed32 multiple_of_test = 12 [(p2p_validate.rules).sfixed32.multiple_of = 3.0];
  sfixed32 example_test = 13 [(p2p_validate.rules).sfixed32.example = 1.0];
  sfixed32 example_factory = 14 [(p2p_validate.rules).sfixed32.example_factory = "p2p@builtin|float"];
  sfixed32 field_test = 15[(p2p_validate.rules).sfixed32.field = "p2p@local|CustomerField"];
  sfixed32 type_test = 16[(p2p_validate.rules).sfixed32.type = "p2p@local|confloat"];
  sfixed32 title_test = 17 [(p2p_validate.rules).sfixed32.title = "title_test"];
  sfixed32 extra_test = 18 [(p2p_validate.rules).sfixed32.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message Sfixed64Test {
  sfixed64 const_test = 1 [(p2p_validate.rules).sfixed64.const = 1];
  sfixed64 range_e_test = 2 [(p2p_validate.rules).sfixed64 = {ge: 1, le: 10}];
  sfixed64 range_test = 3[(p2p_validate.rules).sfixed64 = {gt: 1, lt: 10}];
  sfixed64 in_test = 4[(p2p_validate.rules).sfixed64 = {in: [1,2,3]}];
  sfixed64 not_in_test = 5[(p2p_validate.rules).sfixed64 = {not_in: [1,2,3]}];
  sfixed64 default_test = 6[(p2p_validate.rules).sfixed64.default = 1.0];
  sfixed64 default_template_test = 20[(p2p_validate.rules).sfixed64.default_template = "p2p@timestamp|10"];
  sfixed64 not_enable_test = 7[(p2p_validate.rules).sfixed64.enable = false];
  sfixed64 default_factory_test = 8[(p2p_validate.rules).sfixed64.default_factory = "p2p@builtin|float"];
  sfixed64 required_test = 19[(p2p_validate.rules).sfixed64.required = true];
  sfixed64 alias_test = 10 [(p2p_validate.rules).sfixed64.alias = "alias"];
  sfixed64 desc_test = 11 [(p2p_validate.rules).sfixed64.description = "test desc"];
  sfixed64 multiple_of_test = 12 [(p2p_validate.rules).sfixed64.multiple_of = 3.0];
  sfixed64 example_test = 13 [(p2p_validate.rules).sfixed64.example = 1.0];
  sfixed64 example_factory = 14 [(p2p_validate.rules).sfixed64.example_factory = "p2p@builtin|float"];
  sfixed64 field_test = 15[(p2p_validate.rules).sfixed64.field = "p2p@local|CustomerField"];
  sfixed64 type_test = 16[(p2p_validate.rules).sfixed64.type = "p2p@local|confloat"];
  sfixed64 title_test = 17 [(p2p_validate.rules).sfixed64.title = "title_test"];
  sfixed64 extra_test = 18 [(p2p_validate.rules).sfixed64.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message BoolTest {
  bool bool_1_test =1 [(p2p_validate.rules).bool.const = true];
  bool bool_2_test =2 [(p2p_validate.rules).bool.const = false];
  bool enable_test =3 [(p2p_validate.rules).bool.enable = false];
  bool default_test =4 [(p2p_validate.rules).bool.default = true];
  bool required_test = 19[(p2p_validate.rules).bool.required = true];
  bool alias_test = 10 [(p2p_validate.rules).bool.alias = "alias"];
  bool desc_test = 11 [(p2p_validate.rules).bool.description = "test desc"];
  bool example_test = 13 [(p2p_validate.rules).bool.example = true];
  bool field_test = 15[(p2p_validate.rules).bool.field = "p2p@local|CustomerField"];
  bool title_test = 17 [(p2p_validate.rules).bool.title = "title_test"];
  bool extra_test = 18 [(p2p_validate.rules).bool.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message StringTest {
  string const_test = 1 [(p2p_validate.rules).string.const = "aaa"];
  string len_test = 2 [(p2p_validate.rules).string.len = 3];
  string s_range_len_test =3 [(p2p_validate.rules).string = {min_length:1, max_length:3}];
  string pattern_test = 5 [(p2p_validate.rules).string.pattern = "^test"];
  string prefix_test = 6 [(p2p_validate.rules).string.prefix = "prefix"];
  string suffix_test = 7 [(p2p_validate.rules).string.suffix = "suffix"];
  string contains_test = 8 [(p2p_validate.rules).string.contains = "contains"];
  string not_contains_test = 9 [(p2p_validate.rules).string.not_contains = "not_contains"];
  string in_test = 10 [(p2p_validate.rules).string = {in: ["a", "b", "c"]}];
  string not_in_test = 11 [(p2p_validate.rules).string = {not_in: ["a", "b", "c"]}];
  string email_test = 12 [(p2p_validate.rules).string.email = true];
  string hostname_test = 13 [(p2p_validate.rules).string.hostname = true];
  string ip_test = 14 [(p2p_validate.rules).string.ip = true];
  string ipv4_test = 15 [(p2p_validate.rules).string.ipv4 = true];
  string ipv6_test = 16 [(p2p_validate.rules).string.ipv6 = true];
  string uri_test = 17 [(p2p_validate.rules).string.uri = true];
  string uri_ref_test = 18 [(p2p_validate.rules).string.uri_ref = true];
  string address_test = 19 [(p2p_validate.rules).string.address = true];
  string uuid_test = 20 [(p2p_validate.rules).string.uuid = true];
  string pydantic_type_test = 21 [(p2p_validate.rules).string.pydantic_type = "UUID1"];
  string enable_test = 22 [(p2p_validate.rules).string.enable = false];
  string default_test = 23 [(p2p_validate.rules).string.default = "default"];
  string default_factory_test = 24 [(p2p_validate.rules).string.default_factory = "p2p@import|uuid|uuid4"];
  string required_test = 34[(p2p_validate.rules).string.required = true];
  string alias_test = 26 [(p2p_validate.rules).string.alias = "alias"];
  string desc_test = 27 [(p2p_validate.rules).string.description = "test desc"];
  string example_test = 28 [(p2p_validate.rules).string.example = "example"];
  string example_factory_test = 29 [(p2p_validate.rules).string.example_factory= "p2p@import|uuid|uuid4"];
  string field_test = 30[(p2p_validate.rules).string.field = "p2p@local|CustomerField"];
  string title_test = 31 [(p2p_validate.rules).string.title = "title_test"];
  string type_test = 32 [(p2p_validate.rules).string.type = "p2p@import|pydantic|constr"];
  string extra_test = 33 [(p2p_validate.rules).string.extra = '{"customer_string": "c1", "customer_int": 1}'];
}


message BytesTest {
  bytes const_test = 1 [(p2p_validate.rules).bytes.const = "demo"];
  bytes range_len_test = 3 [(p2p_validate.rules).bytes = {min_length: 1, max_length: 4}];
  bytes prefix_test = 5 [(p2p_validate.rules).bytes.prefix = "prefix"];
  bytes suffix_test = 6 [(p2p_validate.rules).bytes.suffix = "suffix"];
  bytes contains_test = 7 [(p2p_validate.rules).bytes.contains = "contains"];
  bytes in_test = 8 [(p2p_validate.rules).bytes= {in: ["a", "b", "c"]}];
  bytes not_in_test = 9 [(p2p_validate.rules).bytes= {not_in: ["a", "b", "c"]}];
  bytes enable_test = 22 [(p2p_validate.rules).bytes.enable = false];
  bytes default_test = 23 [(p2p_validate.rules).bytes.default = "default"];
  bytes default_factory_test = 24 [(p2p_validate.rules).bytes.default_factory = "p2p@builtin|bytes"];
  bytes required_test = 34[(p2p_validate.rules).bytes.required = true];
  bytes alias_test = 26 [(p2p_validate.rules).bytes.alias = "alias"];
  bytes desc_test = 27 [(p2p_validate.rules).bytes.description = "test desc"];
  bytes example_test = 28 [(p2p_validate.rules).bytes.example = "example"];
  bytes example_factory_test = 29 [(p2p_validate.rules).bytes.example_factory= "p2p@builtin|bytes"];
  bytes field_test = 30[(p2p_validate.rules).bytes.field = "p2p@local|CustomerField"];
  bytes title_test = 31 [(p2p_validate.rules).bytes.title = "title_test"];
  bytes type_test = 32 [(p2p_validate.rules).bytes.type = "p2p@import|pydantic|constr"];
  bytes extra_test = 33 [(p2p_validate.rules).bytes.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

enum State {
  INACTIVE = 0;
  PENDING  = 1;
  ACTIVE   = 2;
}

message EnumTest {
  State const_test = 1 [(p2p_validate.rules).enum.const = 2];
  State in_test = 3 [(p2p_validate.rules).enum = {in: [0, 2]}];
  State not_in_test = 4 [(p2p_validate.rules).enum = {not_in: [0, 2]}];
  State enable_test = 22 [(p2p_validate.rules).enum.enable = false];
  State default_test = 23 [(p2p_validate.rules).enum.default = 1];
  State required_test=34 [(p2p_validate.rules).enum.required= true];
  State alias_test = 26 [(p2p_validate.rules).enum.alias = "alias"];
  State desc_test = 27 [(p2p_validate.rules).enum.description = "test desc"];
  State example_test = 28 [(p2p_validate.rules).enum.example = 2];
  State field_test = 30[(p2p_validate.rules).enum.field = "p2p@local|CustomerField"];
  State title_test = 31 [(p2p_validate.rules).enum.title = "title_test"];
  State extra_test = 33 [(p2p_validate.rules).enum.extra = '{"customer_string": "c1", "customer_int": 1}'];
}


message MapTest {
  map<string, int32> pair_test = 1 [(p2p_validate.rules).map = {min_pairs:1, max_pairs:5}];
  map<string, int32> keys_test = 3 [
    (p2p_validate.rules).map.keys.string.min_length = 1,
    (p2p_validate.rules).map.keys.string.max_length = 5
  ];
  map<string, int32> values_test = 4 [
    (p2p_validate.rules).map.values.int32.ge= 5,
    (p2p_validate.rules).map.values.int32.le = 5
  ];
  map<string, google.protobuf.Timestamp> keys_values_test = 5 [
    (p2p_validate.rules).map.keys.string.min_length = 1,
    (p2p_validate.rules).map.keys.string.max_length = 5,
    (p2p_validate.rules).map.values.timestamp.gt_now = true
  ];
  map<string, int32> enable_test = 6[(p2p_validate.rules).map.enable = false];
  map<string, int32> default_factory_test = 24 [(p2p_validate.rules).map.default_factory = "p2p@builtin|dict"];
  map<string, int32> required_test=34 [(p2p_validate.rules).map.required= true];
  map<string, int32> alias_test = 26 [(p2p_validate.rules).map.alias = "alias"];
  map<string, int32> desc_test = 27 [(p2p_validate.rules).map.description = "test desc"];
  map<string, int32> example_factory_test = 29 [(p2p_validate.rules).map.example_factory= "p2p@builtin|dict"];
  map<string, int32> field_test = 30[(p2p_validate.rules).map.field = "p2p@local|CustomerField"];
  map<string, int32> title_test = 31 [(p2p_validate.rules).map.title = "title_test"];
  map<string, int32> type_test = 32 [(p2p_validate.rules).map.type = "p2p@builtin|dict"];
  map<string, int32> extra_test = 33 [(p2p_validate.rules).map.extra = '{"customer_string": "c1", "customer_int": 1}'];
}


message MessageTest {
  string skip_test = 1 [(p2p_validate.rules).message.skip = true];
  string required_test = 2 [(p2p_validate.rules).message.required = true];
  string extra_test = 33 [(p2p_validate.rules).message.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message RepeatedTest {
  repeated string range_test = 1[(p2p_validate.rules).repeated = {min_items: 1, max_items: 5}];
  repeated string unique_test = 2 [(p2p_validate.rules).repeated.unique = true];
  repeated string items_string_test = 3 [
    (p2p_validate.rules).repeated = {min_items: 1, max_items: 5},
    (p2p_validate.rules).repeated.items.string = {min_length:1, max_length: 5}
  ];
  repeated double items_double_test = 4 [
    (p2p_validate.rules).repeated = {min_items: 1, max_items: 5},
    (p2p_validate.rules).repeated.items.double = {gt:1, lt: 5}
  ];
  repeated int32  items_int32_test = 5 [
    (p2p_validate.rules).repeated = {min_items: 1, max_items: 5},
    (p2p_validate.rules).repeated.items.int32 = {gt:1, lt: 5}
  ];
  repeated google.protobuf.Timestamp items_timestamp_test = 6 [
    (p2p_validate.rules).repeated = {min_items: 1, max_items: 5},
    (p2p_validate.rules).repeated.items.timestamp = {gt: {seconds: 1600000000}, lt: {seconds: 1600000010}}
  ];
  repeated google.protobuf.Duration items_duration_test = 7 [
    (p2p_validate.rules).repeated = {min_items: 1, max_items: 5},
    (p2p_validate.rules).repeated.items.duration = {ge: {seconds: 10}, le: {seconds: 10}}
  ];
  repeated bytes items_bytes_test = 8 [
    (p2p_validate.rules).repeated = {min_items: 1, max_items: 5},
    (p2p_validate.rules).repeated.items.bytes= {min_length: 1, max_length: 5}
  ];
  repeated string enable_test = 9 [(p2p_validate.rules).repeated.enable = false];
  repeated string default_factory_test = 24 [(p2p_validate.rules).repeated.default_factory = "p2p@builtin|list"];
  repeated string required_test=34 [(p2p_validate.rules).repeated.required= true];
  repeated string alias_test = 26 [(p2p_validate.rules).repeated.alias = "alias"];
  repeated string desc_test = 27 [(p2p_validate.rules).repeated.description = "test desc"];
  repeated string example_factory_test = 29 [(p2p_validate.rules).repeated.example_factory= "p2p@builtin|list"];
  repeated string field_test = 30[(p2p_validate.rules).repeated.field = "p2p@local|CustomerField"];
  repeated string title_test = 31 [(p2p_validate.rules).repeated.title = "title_test"];
  repeated string type_test = 32 [(p2p_validate.rules).repeated.type = "p2p@builtin|list"];
  repeated string extra_test = 33 [(p2p_validate.rules).repeated.extra = '{"customer_string": "c1", "customer_int": 1}'];
}


message AnyTest {
  google.protobuf.Any required_test = 1 [(p2p_validate.rules).any.required = true];
  google.protobuf.Any not_in_test = 2 [(p2p_validate.rules).any = {
    not_in: [
      "type.googleapis.com/google.protobuf.Duration",
      "type.googleapis.com/google.protobuf.Timestamp"
    ],
  }];
  google.protobuf.Any in_test = 3 [(p2p_validate.rules).any = {
    in: [
      'p2p@import_instance|google.protobuf.any_pb2|Any|{"type_url": "type.googleapis.com/google.protobuf.Duration"}',
      "type.googleapis.com/google.protobuf.Timestamp"
    ],
  }];
  google.protobuf.Any enable_test = 4 [(p2p_validate.rules).any.enable = false];
  google.protobuf.Any default_test = 23 [
    (p2p_validate.rules).any.default = 'p2p@import_instance|google.protobuf.any_pb2|Any|{"type_url": "type.googleapis.com/google.protobuf.Duration"}'

  ];
  google.protobuf.Any default_factory_test = 24 [(p2p_validate.rules).any.default_factory = "p2p@local|customer_any"];
  google.protobuf.Any alias_test = 26 [(p2p_validate.rules).any.alias = "alias"];
  google.protobuf.Any desc_test = 27 [(p2p_validate.rules).any.description = "test desc"];
  google.protobuf.Any example_test = 28 [(p2p_validate.rules).any.example = "type.googleapis.com/google.protobuf.Duration"];
  google.protobuf.Any example_factory_test = 29 [(p2p_validate.rules).any.example_factory= "p2p@local|customer_any"];
  google.protobuf.Any field_test = 30[(p2p_validate.rules).any.field = "p2p@local|CustomerField"];
  google.protobuf.Any title_test = 31 [(p2p_validate.rules).any.title = "title_test"];
  google.protobuf.Any extra_test = 33 [(p2p_validate.rules).any.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message DurationTest {
  google.protobuf.Duration const_test =2 [(p2p_validate.rules).duration.const = {seconds: 1, nanos: 500000000}];
  google.protobuf.Duration range_test = 3 [(p2p_validate.rules).duration = {lt: {seconds: 10, nanos: 500000000}, gt: {seconds: 5, nanos: 500000000}}];
  google.protobuf.Duration range_e_test = 4 [(p2p_validate.rules).duration = {le: {seconds: 10, nanos: 500000000}, ge: {seconds: 5, nanos: 500000000}}];
  google.protobuf.Duration in_test = 5 [(p2p_validate.rules).duration = {in: [{seconds: 1, nanos: 500000000}, {seconds:3, nanos: 500000000}]}];
  google.protobuf.Duration not_in_test = 6 [(p2p_validate.rules).duration = {not_in: [{seconds: 1, nanos: 500000000}, {seconds:3, nanos: 500000000}]}];
  google.protobuf.Duration enable_test = 22 [(p2p_validate.rules).duration.enable = false];
  google.protobuf.Duration default_test = 23 [(p2p_validate.rules).duration.default = {seconds: 1, nanos:500000000}];
  google.protobuf.Duration default_factory_test = 24 [(p2p_validate.rules).duration.default_factory = "p2p@import|datetime|timedelta"];
  google.protobuf.Duration required_test=34 [(p2p_validate.rules).duration.required= true];
  google.protobuf.Duration alias_test = 26 [(p2p_validate.rules).duration.alias = "alias"];
  google.protobuf.Duration desc_test = 27 [(p2p_validate.rules).duration.description = "test desc"];
  google.protobuf.Duration example_test = 28 [(p2p_validate.rules).duration.example = {seconds: 1, nanos:500000000}];
  google.protobuf.Duration example_factory_test = 29 [(p2p_validate.rules).duration.example_factory= "p2p@import|datetime|timedelta"];
  google.protobuf.Duration field_test = 30[(p2p_validate.rules).duration.field = "p2p@local|CustomerField"];
  google.protobuf.Duration title_test = 31 [(p2p_validate.rules).duration.title = "title_test"];
  google.protobuf.Duration type_test = 32 [(p2p_validate.rules).duration.type = "p2p@import|datetime|timedelta"];
  google.protobuf.Duration extra_test = 33 [(p2p_validate.rules).duration.extra = '{"customer_string": "c1", "customer_int": 1}'];
}

message TimestampTest {
  google.protobuf.Timestamp const_test = 2 [(p2p_validate.rules).timestamp.const = {seconds: 1600000000}];
  google.protobuf.Timestamp range_test = 3 [(p2p_validate.rules).timestamp = {gt: {seconds: 1600000000}, lt: {seconds: 1600000010}}];
  google.protobuf.Timestamp range_e_test = 4 [(p2p_validate.rules).timestamp = {ge: {seconds: 1600000000}, le: {seconds: 1600000010}}];
  google.protobuf.Timestamp lt_now_test = 5 [(p2p_validate.rules).timestamp.lt_now = true];
  google.protobuf.Timestamp gt_now_test = 6 [(p2p_validate.rules).timestamp.gt_now = true];
  google.protobuf.Timestamp within_test = 7 [(p2p_validate.rules).timestamp.within.seconds = 1];
  google.protobuf.Timestamp within_and_gt_now_test = 8 [(p2p_validate.rules).timestamp = {
    gt_now: true,
    within: {seconds: 3600}
  }];
  google.protobuf.Timestamp enable_test = 22 [(p2p_validate.rules).timestamp.enable = false];
  google.protobuf.Timestamp default_test = 23 [(p2p_validate.rules).timestamp.default = {seconds: 1, nanos:500000000}];
  google.protobuf.Timestamp default_factory_test = 24 [(p2p_validate.rules).timestamp.default_factory = "p2p@import|datetime|datetime.now"];
  google.protobuf.Timestamp required_test=34 [(p2p_validate.rules).timestamp.required= true];
  google.protobuf.Timestamp alias_test = 26 [(p2p_validate.rules).timestamp.alias = "alias"];
  google.protobuf.Timestamp desc_test = 27 [(p2p_validate.rules).timestamp.description = "test desc"];
  google.protobuf.Timestamp example_test = 28 [(p2p_validate.rules).timestamp.example = {seconds: 1, nanos:500000000}];
  google.protobuf.Timestamp example_factory_test = 29 [(p2p_validate.rules).timestamp.example_factory= "p2p@import|datetime|datetime.now"];
  google.protobuf.Timestamp field_test = 30[(p2p_validate.rules).timestamp.field = "p2p@local|CustomerField"];
  google.protobuf.Timestamp title_test = 31 [(p2p_validate.rules).timestamp.title = "title_test"];
  google.protobuf.Timestamp type_test = 32 [(p2p_validate.rules).timestamp.type = "p2p@import|datetime|datetime"];
  google.protobuf.Timestamp extra_test = 33 [(p2p_validate.rules).timestamp.extra = '{"customer_string": "c1", "customer_int": 1}'];
}


message MessageIgnoredTest {
  option (p2p_validate.ignored) = true;
  sint32 const_test = 1 [(p2p_validate.rules).sint32.const = 1];
  sint32 range_e_test = 2 [(p2p_validate.rules).sint32 = {ge: 1, le: 10}];
  sint32 range_test = 3[(p2p_validate.rules).sint32 = {gt: 1, lt: 10}];
}


message OneOfTest {
  string header = 1;
  oneof id {
    option (p2p_validate.required) = true;

    string x = 2;
    int32  y = 3;
  }
}
message OneOfNotTest {
  string header = 1;
  oneof id {
    string x = 2;
    int32  y = 3;
  }
}
message OneOfOptionalTest {
  string header = 1;
  oneof id {
    option (p2p_validate.required) = true;
    option (p2p_validate.oneof_extend) = {optional: ["x", "y"]};
    string x = 2;
    int32  y = 3;
    bool z = 4;
  }
  optional string name = 5;
  optional int32 age= 6;
  repeated string str_list = 7;
  map<string, int32> int_map = 8;
}

// test nested message
message NestedMessage{
  message UserPayMessage {
    string bank_number=1 [(p2p_validate.rules).string = {min_length:13, max_length:19}];
    google.protobuf.Timestamp exp=2[(p2p_validate.rules).timestamp.gt_now = true];
    string uuid=3[(p2p_validate.rules).string.uuid = true];
  }
  message NotEnableUserPayMessage {
    string bank_number=1 [(p2p_validate.rules).string = {min_length:13, max_length:19}];
    google.protobuf.Timestamp exp=2[(p2p_validate.rules).timestamp.gt_now = true];
    string uuid=3[(p2p_validate.rules).string.uuid = true];
  }
  map<string, StringTest> string_in_map_test=1;
  map<string, MapTest> map_in_map_test=2;
  UserPayMessage user_pay=3;
  NotEnableUserPayMessage not_enable_user_pay=4[(p2p_validate.rules).message.skip = true];
  google.protobuf.Empty empty=5;
  AfterReferMessage after_refer=7;
}
message AfterReferMessage {
  string uid=1 [(p2p_validate.rules).string = {example: "10086", title: "UID", description: "user union id"}];
  int32 age=2 [(p2p_validate.rules).int32 = {example: 18, title: "use age", ge: 0}];
}


message OptionalMessage{
    // fix https://github.com/so1n/protobuf_to_pydantic/issues/82
    optional MessageIgnoredTest  my_message1 = 1[(p2p_validate.rules).message.required=true];
    // fix https://github.com/so1n/protobuf_to_pydantic/issues/85
    optional MessageIgnoredTest  my_message2 = 2;
    MessageIgnoredTest  my_message3 = 3[(p2p_validate.rules).message.required=true];
    MessageIgnoredTest  my_message4 = 4;
    optional MessageIgnoredTest my_message_5 = 5[(p2p_validate.rules).message.default_template="p2p@builtin|None"];
}
